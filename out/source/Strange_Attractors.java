/* autogenerated by Processing revision 1286 on 2023-04-03 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import peasy.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Strange_Attractors extends PApplet {



double global_dt = 0.05f;
Four_Wing attractor = new Four_Wing(1000, -5, 5);
PeasyCam cam;

 public void setup(){
  strokeWeight(0.05f);
  noCursor();
  /* size commented out by preprocessor */;
  noFill();
  /* smooth commented out by preprocessor */;
  //frameRate(170);
  colorMode(HSB);
  cam = new PeasyCam(this, 500);
  attractor.setDt(global_dt);
}

 public void draw(){
  background(0);
  scale(50);
  attractor.display();
  attractor.updatePoints();
}
public class Aizawa extends Attractor{
  public double dt = 0.01f;
  
  private double a = 0.95f;
  private double b = 0.7f;
  private double c = 0.6f;
  private double d = 3.5f;
  private double e = 0.25f;
  private double f = 0.1f;
    
  Aizawa(int num_points, float min, float max){
    for (int i = 0; i < num_points; i++){
      super.points.add(new Point((double)random(min, max), (double)random(min, max), (double)random(min, max)));
    }
    super.dt = dt;
  }
  
  Aizawa(double x, double y, double z){
    super.points.add(new Point(x, y, z));
    super.dt = dt;
  }
  
  Aizawa(){
    super.points.add(new Point(0.1f, 1, 0.01f));
    super.dt = dt;
  }
  
  protected double dx(double x, double y, double z){
    return ((z - b) * x) - (d * y);
  }
  protected double dy(double x, double y, double z){
    return (d * x) + ((z - b) * y);
  }
  protected double dz(double x, double y, double z){
    return c + (a * z) - (pow((float)z, 3.0f) / 3) - ((pow((float)x, 2.0f) + pow((float)y, 2.0f)) * (1 + e * z)) + (f * z * pow((float)x, 3));
  }
}
public abstract class Attractor{
  protected double dt;
  protected ArrayList<Point> points = new ArrayList<Point>();
  
  protected abstract double dx(double x, double y, double z);
  protected abstract double dy(double x, double y, double z);
  protected abstract double dz(double x, double y, double z);
  
  public void updatePoints(){
    for(Point p : points){
      double x = p.getX();
      double y = p.getY();
      double z = p.getZ();
      p.update(dx(x,y,z) * dt, dy(x,y,z) * dt, dz(x,y,z) * dt);
    }
  }
  
  public void display(){
    for (Point p : points) p.display();
  }
  
  public void setDt(double dt){
    this.dt = dt;
  }
}
public class Four_Wing extends Attractor{
  public double dt = 0.05f;
  
  private double a = 0.2f;
  private double b = 0.01f;
  private double c = -0.4f;
    
  Four_Wing(int num_points, float min, float max){
    for (int i = 0; i < num_points; i++){
      super.points.add(new Point((double)random(min, max), (double)random(min, max), (double)random(min, max)));
    }
    super.dt = dt;
  }
  
  Four_Wing(double x, double y, double z){
    super.points.add(new Point(x, y, z));
    super.dt = dt;
  }
  
  Four_Wing(){
    super.points.add(new Point(1.3f, -0.18f, 0.01f));
    super.dt = dt;
  }
  
  protected double dx(double x, double y, double z){
    return (a * x) + (y * z);
  }
  protected double dy(double x, double y, double z){
    return (b * x) + (c * y) - (x * z);
  }
  protected double dz(double x, double y, double z){
    return -z - (x * y);
  }
}
public class Halvorsen extends Attractor{
  public double dt = 0.01f;
  
  private double a = 1.89f;
  
  Halvorsen(int num_points, float min, float max){
    for (int i = 0; i < num_points; i++){
      super.points.add(new Point((double)random(min, max), (double)random(min, max), (double)random(min, max)));
    }
    super.dt = dt;
  }
  
  Halvorsen(double x, double y, double z){
    super.points.add(new Point(x, y, z));
    super.dt = dt;
  }
  
  Halvorsen(){
    super.points.add(new Point(-1.48f, -1.51f, 2.04f));
    super.dt = dt;
  }
  
  protected double dx(double x, double y, double z){
    return -(a * x) - (4 * y) - (4 * z) - pow((float)y, 2.0f);
  }
  protected double dy(double x, double y, double z){
    return -(a * y) - (4 * z) - (4 * x) - pow((float)z, 2.0f);
  }
  protected double dz(double x, double y, double z){
    return -(a * z) - (4 * x) - (4 * y) - pow((float)x, 2.0f);
  }
}
public class Lorentz extends Attractor{
  public double dt = 0.01f;
  
  private double sigma = 10;
  private double rho = 28;
  private double beta = 8.0f/3.0f;
    
  Lorentz(int num_points, float min, float max){
    for (int i = 0; i < num_points; i++){
      super.points.add(new Point((double)random(min, max), (double)random(min, max), (double)random(min, max)));
    }
    super.dt = dt;
  }
  
  Lorentz(double x, double y, double z){
    super.points.add(new Point(x, y, z));
    super.dt = dt;
  }
  
  Lorentz(boolean chaos){
    if (chaos){
      double x = (double)random(-2,2);
      double y = (double)random(-2,2);
      double z = (double)random(-2,2);
      super.points.add(new Point(x, y, z));
      super.points.add(new Point(x+0.001f, y, z));
    }else{
      super.points.add(new Point(1.1f, 2.0f, 7.0f));
    }
    super.dt = dt;
  }
  
  protected double dx(double x, double y, double z){
    return sigma * (y - x);
  }
  protected double dy(double x, double y, double z){
    return (x * (rho - z)) - y;
  }
  protected double dz(double x, double y, double z){
    return (x * y) - (beta * z);
  }
}
public class Point{
  private double x;
  private double y;
  private double z;
  private int l = 100; //2147483647
  
  private ArrayList<PVector> line = new ArrayList<PVector>();
  
  Point(double x_init, double y_init, double z_init){
    x = x_init;
    y = y_init;
    z = z_init;
    line.add(new PVector((float)x, (float)y, (float)z));
  }
  
  public void display(){
    beginShape();
    float h = 140;
    float d = 1;
    for (PVector vec : line){
      stroke(h,255,255);
      vertex(vec.x, vec.y, vec.z);
      if (h <= 140){
        d = 1;
      }else if(h >= 230){
        d = -1;
      }
      h = h + d;
    }
    endShape();
  }
  
  public void update(double dx, double dy, double dz){
    x += dx;
    y += dy;
    z += dz;
    if (line.size() >= l){
      line.remove(0);
      line.add(new PVector((float)x, (float)y, (float)z));
    }else{
      line.add(new PVector((float)x, (float)y, (float)z));
    }
  }
  
  public double getX(){
    return x;
  }
  
  public double getY(){
    return y;
  }
  
  public double getZ(){
    return z;
  }
  
}
public class Rabinovich_Fabrikant extends Attractor{
  public double dt = 0.05f;
  private double alpha = 0.14f;
  private double gamma = 0.10f;
  
  
  Rabinovich_Fabrikant(int num_points, float min, float max){
    for (int i = 0; i < num_points; i++){
      super.points.add(new Point((double)random(min, max), (double)random(min, max), (double)random(min, max)));
    }
    super.dt = dt;
  }
  
  Rabinovich_Fabrikant(double x, double y, double z){
    super.points.add(new Point(x, y, z));
    super.dt = dt;
  }
  
  Rabinovich_Fabrikant(){
    super.points.add(new Point(-1, 0, 0.5f));
    super.dt = dt;
  }
  
  protected double dx(double x, double y, double z){
    return y*(z - 1 + pow((float)x, 2.0f)) + (gamma * x);
  }
  protected double dy(double x, double y, double z){
    return x*(3*z + 1 - pow((float)x, 2.0f)) + (gamma * y);
  }
  protected double dz(double x, double y, double z){
    return -2*z*(alpha + x*y);
  }
}
public class Thomas extends Attractor{
  public double dt = 0.2f;
  private double b = 0.208186f;
    
  Thomas(int num_points, float min, float max){
    for (int i = 0; i < num_points; i++){
      super.points.add(new Point((double)random(min, max), (double)random(min, max), (double)random(min, max)));
    }
    super.dt = dt;
  }
  
  Thomas(double x, double y, double z){
    super.points.add(new Point(x, y, z));
    super.dt = dt;
  }
  
  Thomas(){
    super.points.add(new Point(1.1f, 1.1f, -0.01f));
    super.dt = dt;
  }
  
  protected double dx(double x, double y, double z){
    return sin((float)y) - (b*x);
  }
  protected double dy(double x, double y, double z){
    return sin((float)z) - (b*y);
  }
  protected double dz(double x, double y, double z){
    return sin((float)x) - (b*z);
  }
}


  public void settings() { fullScreen(P3D);
smooth(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Strange_Attractors" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
